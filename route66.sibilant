;; Imports
(var assert (require 'assert))

;; Debug output
(var DEBUG (or process.env.DEBUG false))
(def log () (if DEBUG (apply console.log arguments)))

(def matches (routes url)
  ;; Takes a list of tuples [path, fn]
  ;; Returns the first matching entry to the url
  ;; or null if not found
  (assert.ok (array? routes) "Routes must be an array of (reqexp handler-fn) tuples")
  (assert.ok (string? url) "URL must be a string")

  (var matching (.filter routes
                         (# (x)
                            (exists? (.match url (regex (+ "^" (first x) "$"))))))
       match (if (empty? matching)
               null
               (first matching)))
  match)

(def create-dispatcher (routes not-found)
  (# (url)
     ;; Routes is an array of [path fn] tuples
     ;; Each path is a string
     ;; Each fn must have a signature of (req res)
     ;; Returns correct function for route or not-found
     (assert.ok (array? routes) "Routes must be an array of (reqexp handler-fn) tuples")
     (assert.ok (function? not-found) "The 404 handler must be a function")

     (if (empty? routes)
       not-found
       (do
         (var match (matches routes url))
         (log "match" match "for" url)
         (if (and (exists? match)
                  (not (empty? match)))
           (second match)
           not-found)))))

;; Exports
(assign module.exports {'matches matches
                        'create-dispatcher create-dispatcher})
